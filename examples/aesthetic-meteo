#!/usr/bin/env python3
import argparse
import collections
import csv
import math
import sys
import time
import urllib.request

from aesthetic import animate
from aesthetic import colors
from aesthetic.output import blinkstick
from aesthetic.output import gif
from aesthetic.output import tkinter
from aesthetic.util import normalize


def log(*args):
  print(args)

def fetch_data():
  url = 'http://data.geo.admin.ch/ch.meteoschweiz.swissmetnet/VQHA69.csv'
  for line in urllib.request.urlopen(url):
    yield line.decode('utf-8')

def open_saved_data():
  return open('VQHA69.csv')

Weather = collections.namedtuple(
  'Weather',
  (
    'temperature_celsius',
    'wind_speed_kmh',
    'precipitation_mm_10m',
  )
)

def visualize(weather, renderer):
  if not weather:
    log("No weather data available.")
    return

  log(weather)
  wind = normalize(weather.wind_speed_kmh, 0, 30)
  regen = normalize(weather.precipitation_mm_10m, 0, 10)
  farbe = colors.get_color(weather.temperature_celsius)

  farben1 = (colors.icyblue, colors.lightblue)
  farben2 = (colors.sunyellow, colors.orange, colors.red)
  def drag(col):
    return colors.mix_color(col, farbe, 0.3)
  farben1 = list(map(drag, farben1))
  farben2 = list(map(drag, farben2))

  renderer(animate.animate(glow1_colors=farben1,
                           glow2_colors=farben2,
                           hectic=wind))


def interpret_data(reader):
  # Discard two lines... :-/
  next(reader)
  next(reader)

  for line in csv.DictReader(reader, delimiter='|'):
    # TODO: Make this configurable.
    if line['stn'] == 'SMA':  # Zurich Fluntern
      weather = Weather(
        temperature_celsius=float(line['tre200s0']),
        wind_speed_kmh=float(line['fu3010z0']),
        precipitation_mm_10m=float(line['rre150z0']),
      )
      return weather
  return None

def parse_args(args):
  parser = argparse.ArgumentParser(
    description=(
      'An animated weather indicator based on Swiss meteorological data.'))
  parser.add_argument('--source', '-src', nargs='?',
                      choices=('web', 'local'), default='local')
  parser.add_argument('--quiet', '-q', dest='quiet',
                      action='store_true', default=False)
  parser.add_argument('--type', '-t', dest='type', nargs='?',
                      choices=('blinkstick', 'tk', 'gif'), default='tk')
  parser.add_argument('--output', '-o', dest='output', nargs='?',
                      type=argparse.FileType('wb'), default=None)

  args = parser.parse_args(args)

  if args.output and not args.type == "gif":
    parser.error('--output only makes sense together with gif output type')

  args.output = args.output or sys.stdout

  return args

def main(args):
  args = parse_args(args)

  if args.quiet:
    global log
    log = lambda *args: None

  if args.source == 'web':
    reader = fetch_data()
  elif args.source == 'local':
    reader = open_saved_data()

  if args.type == "blinkstick":
    renderer = blinkstick.render
  elif args.type == "tk":
    renderer = tkinter.render
  elif args.type == "gif":
    renderer = lambda animation: gif.render(animation, args.output)

  visualize(interpret_data(reader), renderer)


if __name__ == "__main__":
  main(sys.argv[1:])
